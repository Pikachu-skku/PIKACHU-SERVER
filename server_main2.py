# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15NfL6xCqGeMuskvqz_ARApWPAIbnq3Yb
"""

''' Colab 환경에서는 필요

!pip install --upgrade setuptools

!pip3 install python-telegram-bot

!pip install firebase_admin

'''

import asyncio
import random
import firebase_admin
from firebase_admin import credentials
from firebase_admin import db
import time

from telegram.ext import (
    CommandHandler,
    Application
)

import nest_asyncio

nest_asyncio.apply()

'''

GPSs => [
    (Telegram_id) => [
        GPS => [위도, 경도],
        last_time => 0000, # -1이 될 경우 긴급상황 메시지가 전송된 것
        status => (boolean) # true : 외출 상황, false : 외출 상황 아님,
        disconnected => (boolean) # true : 긴급 상황, false : 긴급 상황 아님
    ]
]

FRIENDS => [
    (Telegram id) => [(Friend 1 Telegram id), (Friend 2 Telegram id)]
]

REGISTER => [
    (Telegram id) => [
        status => (boolean) # True : 인증 완료, False : 인증 완료 안 됨
        code => (integer) # 6자리 숫자 원래 코드
        sent_code => (integer) #  휴대폰에서 보낸 6자리 코드
    ]
]

'''

print("[System] Start Pikachu server service")

# 파이어베이스 설정

cred = credentials.Certificate("skku-pikachu-firebase.json") 
firebase_admin.initialize_app(cred, {
    'databaseURL' : 'https://skku-pikachu-default-rtdb.firebaseio.com/'
})

print("[System/Telegram] Setting... ")

token = "5417501156:AAGiZWxuIX0N7Ujr5iFFuiVB6lr8S5sNt9c" # TODO 토큰 알아오기

updater = Application.builder().token(token).build()

bot = updater.bot

'''

텔레그램 CommandHandler 설정

명령어 종류 : register, delete, friends

'''


f_db = db.reference("FRIENDS")

async def register_friend(update, context): # 사용자가 친구를 등록

    friend_id = context.args[0]

    await context.bot.send_message(chat_id=update.effective_chat.id, text= friend_id + "를 응급 연락처에 저장합니다. 사용자님은 이 사실을 /delete를 통해 취소할 수 있습니다.")

    friends = f_db.child(str(update.effective_chat.id)).get()

    if friends is None:
        friends = dict()


    friends[friend_id] = 0
    f_db.child(str( update.effective_chat.id)).set(friends)

updater.add_handler(CommandHandler('register', register_friend))


async def delete_friend(update, context): # 사용자가 친구를 자신의 긴급연락처에 존재하는 것을 거절

    friend_id = context.args[0]

    friends_in_me = f_db.child(str(update.effective_chat.id)).get()

    if friend_id not in friends_in_me.keys():

        await context.bot.send_message(chat_id=update.effective_chat.id, text= friend_id + "님은 사용자와 친구가 아닙니다.")

    else:

        await context.bot.send_message(chat_id=update.effective_chat.id, text= friend_id + "님과 친구를 취소합니다.")

        del friends_in_me[friend_id] # 나의 연락처에 친구 삭제

        f_db.child(str(update.effective_chat.id)).set(friends_in_me)


updater.add_handler(CommandHandler('delete', delete_friend))


async def friend_list(update, context): # 자신의 친구 조회

    friends = f_db.child(str(update.effective_chat.id)).get()

    await context.bot.send_message(chat_id=update.effective_chat.id, text= "응급 연락처에 존재하는 친구 목록을 보내드립니다.")

    if friends is None:
        return

    if len(friends.keys()) == 0:
        return

    for friend_id in friends.keys():

        await context.bot.send_message(chat_id=update.effective_chat.id, text= friend_id)
    
    await context.bot.send_message(chat_id=update.effective_chat.id, text= "끝")


updater.add_handler(CommandHandler('friends', friend_list))

async def get_my_id(update, context): # 자신의 아이디 조회
    
    await context.bot.send_message(chat_id=update.effective_chat.id, text= update.effective_chat.id)


updater.add_handler(CommandHandler('myid', get_my_id))




async def run_tele_bot():
    print("[System/Telegram] Start Telegram Bot")
    updater.run_polling()


asyncio.run(run_tele_bot())
